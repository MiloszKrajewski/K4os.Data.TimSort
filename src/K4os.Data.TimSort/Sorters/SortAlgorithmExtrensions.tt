<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// This file is automatically generated from template
// all changes will be lost
// T4 templates specification:
// https://docs.microsoft.com/en-us/visualstudio/modeling/writing-a-t4-text-template?view=vs-2022

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using K4os.Data.TimSort.Comparers;
using K4os.Data.TimSort.Internals;

namespace K4os.Data.TimSort.Sorters
{
	public static partial class SortAlgorithmExtensions
	{

<#
	foreach (var algo in new[] {
		"Tim", 
		"Intro",
	})
	foreach (var array in new[] {
		new { Def = "Span<T> span", Use = "span" },
		new { Def = "T[] array", Use = "array.AsSpan()" },
		new { Def = "List<T> list", Use = "list.AsSpan()" },
		new { Def = "IList<T> list", Use = "list" },
		new { Def = "Span<T> span, int offset, int length", Use = "span.Slice(offset, length)" },
		new { Def = "T[] array, int offset, int length", Use = "array.AsSpan(offset, length)" },
		new { Def = "List<T> list, int offset, int length", Use = "list.AsSpan(offset, length)" },
		new { Def = "IList<T> list, int offset, int length", Use = "list, offset, offset + length" },
	})
	foreach (var comparer in new[] {
		new { Def = "", Use = "" },
		new { Def = ", Comparer<T> comparer", Use = ", LessThan.Create(comparer)" },
		new { Def = ", Comparison<T> comparer", Use = ", LessThan.Create(comparer)" },
		new { Def = ", IComparer<T> comparer", Use = ", LessThan.Create(comparer)" },
	})
	{
#>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void <#= algo #>Sort<T>(this <#= array.Def #><#= comparer.Def #>) =>
			default(<#= algo #>SortAlgorithm).Sort(<#= array.Use #><#= comparer.Use #>);

<#
	}
#>
	}
}
