<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// This file is automatically generated from template
// all changes will be lost
// T4 templates specification:
// https://docs.microsoft.com/en-us/visualstudio/modeling/writing-a-t4-text-template?view=vs-2022

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using K4os.Data.TimSort.Comparers;
using K4os.Data.TimSort.Internals;
using K4os.Data.TimSort.Sorters;

namespace K4os.Data.TimSort;

/// <summary>Extensions giving easy access to sorting method.</summary>
public static partial class SortAlgorithmExtensions
{

<#
	foreach (var algo in new[] {
		"Tim",
		"Intro",
		// "Quad",
	})
	foreach (var array in new[] {
		new { Def = "Span<T> span", Use = "span" },
		new { Def = "T[] array", Use = "array.AsSpan()" },
		new { Def = "List<T> list", Use = "list.AsSpan()" },
		new { Def = "IList<T> list", Use = "list" },
		new { Def = "Span<T> span, int offset, int length", Use = "span.Slice(offset, length)" },
		new { Def = "T[] array, int offset, int length", Use = "array.AsSpan(offset, length)" },
		new { Def = "List<T> list, int offset, int length", Use = "list.AsSpan(offset, length)" },
		new { Def = "IList<T> list, int offset, int length", Use = "list, offset, offset + length" },
	})
	foreach (var comparer in new[] {
		new { Def = "", Use = "" },
		new { Def = ", Comparer<T> comparer", Use = ", LessThan.Create(comparer)" },
		new { Def = ", Comparison<T> comparer", Use = ", LessThan.Create(comparer)" },
		new { Def = ", IComparer<T> comparer", Use = ", LessThan.Create(comparer)" },
		new { Def = ", Func<T, T, bool> lessThan", Use = ", LessThan.Create(lessThan)" },
		new { Def = ", TLessThan lessThan", Use = ", lessThan" },
	})
	{
		var type =
			array.Def.Contains("span") ? "span" :
			array.Def.Contains("array") ? "array" :
			array.Def.Contains("list") ? "list" :
			"collection";
		var hasOffset = array.Def.Contains("offset");
		var hasComparer = comparer.Def.Contains("comparer");
		var hasLessThan = comparer.Def.Contains("lessThan");
		
		var lessThanGenericArg = hasLessThan ? ", TLessThan" : "";
		var lessThanConstraint = hasLessThan ? "where TLessThan: ILessThan<T>" : "// no \"where\" constraints";
#>
    /// <summary>Sorts <#= type #> using <#= algo #>Sort.</summary>
	/// <param name="<#= type #>"><#= Capitalize(type) #> to be sorted.</param>
<#          if (hasOffset) { #>
    /// <param name="offset">Starting offset within <#= type #>.</param>
    /// <param name="length">Length of sorted slice of <#= type #>.</param>
<# } #>
<#          if (hasComparer) { #>
    /// <param name="comparer">Comparer.</param>
<# } #>
<#          if (hasLessThan) { #>
    /// <param name="lessThan">LessThan comparer.</param>
<# } #>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void <#= algo #>Sort<T<#= lessThanGenericArg #>>(
        this <#= array.Def #><#= comparer.Def #>)
        <#= lessThanConstraint #>
        => default(<#= algo #>SortAlgorithm)
            .Sort(<#= array.Use #><#= comparer.Use #>);

<#
	}
#>
}
<#+
	private static string Capitalize(string text) => 
		text.Substring(0, 1).ToUpperInvariant() + text.Substring(1);
#>
