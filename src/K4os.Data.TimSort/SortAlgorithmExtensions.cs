// This file is automatically generated from template
// all changes will be lost
// T4 templates specification:
// https://docs.microsoft.com/en-us/visualstudio/modeling/writing-a-t4-text-template?view=vs-2022

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using K4os.Data.TimSort.Comparers;
using K4os.Data.TimSort.Internals;
using K4os.Data.TimSort.Sorters;

namespace K4os.Data.TimSort;

/// <summary>Extensions giving easy access to sorting method.</summary>
public static partial class SortAlgorithmExtensions
{

    /// <summary>Sorts span using TimSort.</summary>
	/// <param name="span">Span to be sorted.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this Span<T> span)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(span);

    /// <summary>Sorts span using TimSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this Span<T> span, Comparer<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(span, LessThan.Create(comparer));

    /// <summary>Sorts span using TimSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this Span<T> span, Comparison<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(span, LessThan.Create(comparer));

    /// <summary>Sorts span using TimSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this Span<T> span, IComparer<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(span, LessThan.Create(comparer));

    /// <summary>Sorts span using TimSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T, TLessThan>(
        this Span<T> span, Func<T, T, bool> lessThan)
        where TLessThan: ILessThan<T>
        => default(TimSortAlgorithm)
            .Sort(span, LessThan.Create(lessThan));

    /// <summary>Sorts span using TimSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T, TLessThan>(
        this Span<T> span, TLessThan lessThan)
        where TLessThan: ILessThan<T>
        => default(TimSortAlgorithm)
            .Sort(span, lessThan);

    /// <summary>Sorts array using TimSort.</summary>
	/// <param name="array">Array to be sorted.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this T[] array)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(array.AsSpan());

    /// <summary>Sorts array using TimSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this T[] array, Comparer<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(array.AsSpan(), LessThan.Create(comparer));

    /// <summary>Sorts array using TimSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this T[] array, Comparison<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(array.AsSpan(), LessThan.Create(comparer));

    /// <summary>Sorts array using TimSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this T[] array, IComparer<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(array.AsSpan(), LessThan.Create(comparer));

    /// <summary>Sorts array using TimSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T, TLessThan>(
        this T[] array, Func<T, T, bool> lessThan)
        where TLessThan: ILessThan<T>
        => default(TimSortAlgorithm)
            .Sort(array.AsSpan(), LessThan.Create(lessThan));

    /// <summary>Sorts array using TimSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T, TLessThan>(
        this T[] array, TLessThan lessThan)
        where TLessThan: ILessThan<T>
        => default(TimSortAlgorithm)
            .Sort(array.AsSpan(), lessThan);

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this List<T> list)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(list.AsSpan());

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this List<T> list, Comparer<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(list.AsSpan(), LessThan.Create(comparer));

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this List<T> list, Comparison<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(list.AsSpan(), LessThan.Create(comparer));

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this List<T> list, IComparer<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(list.AsSpan(), LessThan.Create(comparer));

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T, TLessThan>(
        this List<T> list, Func<T, T, bool> lessThan)
        where TLessThan: ILessThan<T>
        => default(TimSortAlgorithm)
            .Sort(list.AsSpan(), LessThan.Create(lessThan));

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T, TLessThan>(
        this List<T> list, TLessThan lessThan)
        where TLessThan: ILessThan<T>
        => default(TimSortAlgorithm)
            .Sort(list.AsSpan(), lessThan);

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this IList<T> list)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(list);

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this IList<T> list, Comparer<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(list, LessThan.Create(comparer));

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this IList<T> list, Comparison<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(list, LessThan.Create(comparer));

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this IList<T> list, IComparer<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(list, LessThan.Create(comparer));

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T, TLessThan>(
        this IList<T> list, Func<T, T, bool> lessThan)
        where TLessThan: ILessThan<T>
        => default(TimSortAlgorithm)
            .Sort(list, LessThan.Create(lessThan));

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T, TLessThan>(
        this IList<T> list, TLessThan lessThan)
        where TLessThan: ILessThan<T>
        => default(TimSortAlgorithm)
            .Sort(list, lessThan);

    /// <summary>Sorts span using TimSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="offset">Starting offset within span.</param>
    /// <param name="length">Length of sorted slice of span.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this Span<T> span, int offset, int length)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(span.Slice(offset, length));

    /// <summary>Sorts span using TimSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="offset">Starting offset within span.</param>
    /// <param name="length">Length of sorted slice of span.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this Span<T> span, int offset, int length, Comparer<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(span.Slice(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts span using TimSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="offset">Starting offset within span.</param>
    /// <param name="length">Length of sorted slice of span.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this Span<T> span, int offset, int length, Comparison<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(span.Slice(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts span using TimSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="offset">Starting offset within span.</param>
    /// <param name="length">Length of sorted slice of span.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this Span<T> span, int offset, int length, IComparer<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(span.Slice(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts span using TimSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="offset">Starting offset within span.</param>
    /// <param name="length">Length of sorted slice of span.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T, TLessThan>(
        this Span<T> span, int offset, int length, Func<T, T, bool> lessThan)
        where TLessThan: ILessThan<T>
        => default(TimSortAlgorithm)
            .Sort(span.Slice(offset, length), LessThan.Create(lessThan));

    /// <summary>Sorts span using TimSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="offset">Starting offset within span.</param>
    /// <param name="length">Length of sorted slice of span.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T, TLessThan>(
        this Span<T> span, int offset, int length, TLessThan lessThan)
        where TLessThan: ILessThan<T>
        => default(TimSortAlgorithm)
            .Sort(span.Slice(offset, length), lessThan);

    /// <summary>Sorts array using TimSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="offset">Starting offset within array.</param>
    /// <param name="length">Length of sorted slice of array.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this T[] array, int offset, int length)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(array.AsSpan(offset, length));

    /// <summary>Sorts array using TimSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="offset">Starting offset within array.</param>
    /// <param name="length">Length of sorted slice of array.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this T[] array, int offset, int length, Comparer<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(array.AsSpan(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts array using TimSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="offset">Starting offset within array.</param>
    /// <param name="length">Length of sorted slice of array.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this T[] array, int offset, int length, Comparison<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(array.AsSpan(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts array using TimSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="offset">Starting offset within array.</param>
    /// <param name="length">Length of sorted slice of array.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this T[] array, int offset, int length, IComparer<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(array.AsSpan(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts array using TimSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="offset">Starting offset within array.</param>
    /// <param name="length">Length of sorted slice of array.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T, TLessThan>(
        this T[] array, int offset, int length, Func<T, T, bool> lessThan)
        where TLessThan: ILessThan<T>
        => default(TimSortAlgorithm)
            .Sort(array.AsSpan(offset, length), LessThan.Create(lessThan));

    /// <summary>Sorts array using TimSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="offset">Starting offset within array.</param>
    /// <param name="length">Length of sorted slice of array.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T, TLessThan>(
        this T[] array, int offset, int length, TLessThan lessThan)
        where TLessThan: ILessThan<T>
        => default(TimSortAlgorithm)
            .Sort(array.AsSpan(offset, length), lessThan);

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this List<T> list, int offset, int length)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(list.AsSpan(offset, length));

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this List<T> list, int offset, int length, Comparer<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(list.AsSpan(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this List<T> list, int offset, int length, Comparison<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(list.AsSpan(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this List<T> list, int offset, int length, IComparer<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(list.AsSpan(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T, TLessThan>(
        this List<T> list, int offset, int length, Func<T, T, bool> lessThan)
        where TLessThan: ILessThan<T>
        => default(TimSortAlgorithm)
            .Sort(list.AsSpan(offset, length), LessThan.Create(lessThan));

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T, TLessThan>(
        this List<T> list, int offset, int length, TLessThan lessThan)
        where TLessThan: ILessThan<T>
        => default(TimSortAlgorithm)
            .Sort(list.AsSpan(offset, length), lessThan);

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this IList<T> list, int offset, int length)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(list, offset, offset + length);

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this IList<T> list, int offset, int length, Comparer<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(list, offset, offset + length, LessThan.Create(comparer));

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this IList<T> list, int offset, int length, Comparison<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(list, offset, offset + length, LessThan.Create(comparer));

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T>(
        this IList<T> list, int offset, int length, IComparer<T> comparer)
        // no "where" constraints
        => default(TimSortAlgorithm)
            .Sort(list, offset, offset + length, LessThan.Create(comparer));

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T, TLessThan>(
        this IList<T> list, int offset, int length, Func<T, T, bool> lessThan)
        where TLessThan: ILessThan<T>
        => default(TimSortAlgorithm)
            .Sort(list, offset, offset + length, LessThan.Create(lessThan));

    /// <summary>Sorts list using TimSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void TimSort<T, TLessThan>(
        this IList<T> list, int offset, int length, TLessThan lessThan)
        where TLessThan: ILessThan<T>
        => default(TimSortAlgorithm)
            .Sort(list, offset, offset + length, lessThan);

    /// <summary>Sorts span using IntroSort.</summary>
	/// <param name="span">Span to be sorted.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this Span<T> span)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(span);

    /// <summary>Sorts span using IntroSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this Span<T> span, Comparer<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(span, LessThan.Create(comparer));

    /// <summary>Sorts span using IntroSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this Span<T> span, Comparison<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(span, LessThan.Create(comparer));

    /// <summary>Sorts span using IntroSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this Span<T> span, IComparer<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(span, LessThan.Create(comparer));

    /// <summary>Sorts span using IntroSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T, TLessThan>(
        this Span<T> span, Func<T, T, bool> lessThan)
        where TLessThan: ILessThan<T>
        => default(IntroSortAlgorithm)
            .Sort(span, LessThan.Create(lessThan));

    /// <summary>Sorts span using IntroSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T, TLessThan>(
        this Span<T> span, TLessThan lessThan)
        where TLessThan: ILessThan<T>
        => default(IntroSortAlgorithm)
            .Sort(span, lessThan);

    /// <summary>Sorts array using IntroSort.</summary>
	/// <param name="array">Array to be sorted.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this T[] array)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(array.AsSpan());

    /// <summary>Sorts array using IntroSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this T[] array, Comparer<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(array.AsSpan(), LessThan.Create(comparer));

    /// <summary>Sorts array using IntroSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this T[] array, Comparison<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(array.AsSpan(), LessThan.Create(comparer));

    /// <summary>Sorts array using IntroSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this T[] array, IComparer<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(array.AsSpan(), LessThan.Create(comparer));

    /// <summary>Sorts array using IntroSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T, TLessThan>(
        this T[] array, Func<T, T, bool> lessThan)
        where TLessThan: ILessThan<T>
        => default(IntroSortAlgorithm)
            .Sort(array.AsSpan(), LessThan.Create(lessThan));

    /// <summary>Sorts array using IntroSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T, TLessThan>(
        this T[] array, TLessThan lessThan)
        where TLessThan: ILessThan<T>
        => default(IntroSortAlgorithm)
            .Sort(array.AsSpan(), lessThan);

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this List<T> list)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(list.AsSpan());

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this List<T> list, Comparer<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(list.AsSpan(), LessThan.Create(comparer));

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this List<T> list, Comparison<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(list.AsSpan(), LessThan.Create(comparer));

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this List<T> list, IComparer<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(list.AsSpan(), LessThan.Create(comparer));

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T, TLessThan>(
        this List<T> list, Func<T, T, bool> lessThan)
        where TLessThan: ILessThan<T>
        => default(IntroSortAlgorithm)
            .Sort(list.AsSpan(), LessThan.Create(lessThan));

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T, TLessThan>(
        this List<T> list, TLessThan lessThan)
        where TLessThan: ILessThan<T>
        => default(IntroSortAlgorithm)
            .Sort(list.AsSpan(), lessThan);

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this IList<T> list)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(list);

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this IList<T> list, Comparer<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(list, LessThan.Create(comparer));

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this IList<T> list, Comparison<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(list, LessThan.Create(comparer));

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this IList<T> list, IComparer<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(list, LessThan.Create(comparer));

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T, TLessThan>(
        this IList<T> list, Func<T, T, bool> lessThan)
        where TLessThan: ILessThan<T>
        => default(IntroSortAlgorithm)
            .Sort(list, LessThan.Create(lessThan));

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T, TLessThan>(
        this IList<T> list, TLessThan lessThan)
        where TLessThan: ILessThan<T>
        => default(IntroSortAlgorithm)
            .Sort(list, lessThan);

    /// <summary>Sorts span using IntroSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="offset">Starting offset within span.</param>
    /// <param name="length">Length of sorted slice of span.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this Span<T> span, int offset, int length)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(span.Slice(offset, length));

    /// <summary>Sorts span using IntroSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="offset">Starting offset within span.</param>
    /// <param name="length">Length of sorted slice of span.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this Span<T> span, int offset, int length, Comparer<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(span.Slice(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts span using IntroSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="offset">Starting offset within span.</param>
    /// <param name="length">Length of sorted slice of span.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this Span<T> span, int offset, int length, Comparison<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(span.Slice(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts span using IntroSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="offset">Starting offset within span.</param>
    /// <param name="length">Length of sorted slice of span.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this Span<T> span, int offset, int length, IComparer<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(span.Slice(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts span using IntroSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="offset">Starting offset within span.</param>
    /// <param name="length">Length of sorted slice of span.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T, TLessThan>(
        this Span<T> span, int offset, int length, Func<T, T, bool> lessThan)
        where TLessThan: ILessThan<T>
        => default(IntroSortAlgorithm)
            .Sort(span.Slice(offset, length), LessThan.Create(lessThan));

    /// <summary>Sorts span using IntroSort.</summary>
	/// <param name="span">Span to be sorted.</param>
    /// <param name="offset">Starting offset within span.</param>
    /// <param name="length">Length of sorted slice of span.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T, TLessThan>(
        this Span<T> span, int offset, int length, TLessThan lessThan)
        where TLessThan: ILessThan<T>
        => default(IntroSortAlgorithm)
            .Sort(span.Slice(offset, length), lessThan);

    /// <summary>Sorts array using IntroSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="offset">Starting offset within array.</param>
    /// <param name="length">Length of sorted slice of array.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this T[] array, int offset, int length)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(array.AsSpan(offset, length));

    /// <summary>Sorts array using IntroSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="offset">Starting offset within array.</param>
    /// <param name="length">Length of sorted slice of array.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this T[] array, int offset, int length, Comparer<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(array.AsSpan(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts array using IntroSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="offset">Starting offset within array.</param>
    /// <param name="length">Length of sorted slice of array.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this T[] array, int offset, int length, Comparison<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(array.AsSpan(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts array using IntroSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="offset">Starting offset within array.</param>
    /// <param name="length">Length of sorted slice of array.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this T[] array, int offset, int length, IComparer<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(array.AsSpan(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts array using IntroSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="offset">Starting offset within array.</param>
    /// <param name="length">Length of sorted slice of array.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T, TLessThan>(
        this T[] array, int offset, int length, Func<T, T, bool> lessThan)
        where TLessThan: ILessThan<T>
        => default(IntroSortAlgorithm)
            .Sort(array.AsSpan(offset, length), LessThan.Create(lessThan));

    /// <summary>Sorts array using IntroSort.</summary>
	/// <param name="array">Array to be sorted.</param>
    /// <param name="offset">Starting offset within array.</param>
    /// <param name="length">Length of sorted slice of array.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T, TLessThan>(
        this T[] array, int offset, int length, TLessThan lessThan)
        where TLessThan: ILessThan<T>
        => default(IntroSortAlgorithm)
            .Sort(array.AsSpan(offset, length), lessThan);

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this List<T> list, int offset, int length)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(list.AsSpan(offset, length));

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this List<T> list, int offset, int length, Comparer<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(list.AsSpan(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this List<T> list, int offset, int length, Comparison<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(list.AsSpan(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this List<T> list, int offset, int length, IComparer<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(list.AsSpan(offset, length), LessThan.Create(comparer));

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T, TLessThan>(
        this List<T> list, int offset, int length, Func<T, T, bool> lessThan)
        where TLessThan: ILessThan<T>
        => default(IntroSortAlgorithm)
            .Sort(list.AsSpan(offset, length), LessThan.Create(lessThan));

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T, TLessThan>(
        this List<T> list, int offset, int length, TLessThan lessThan)
        where TLessThan: ILessThan<T>
        => default(IntroSortAlgorithm)
            .Sort(list.AsSpan(offset, length), lessThan);

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this IList<T> list, int offset, int length)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(list, offset, offset + length);

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this IList<T> list, int offset, int length, Comparer<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(list, offset, offset + length, LessThan.Create(comparer));

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this IList<T> list, int offset, int length, Comparison<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(list, offset, offset + length, LessThan.Create(comparer));

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="comparer">Comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T>(
        this IList<T> list, int offset, int length, IComparer<T> comparer)
        // no "where" constraints
        => default(IntroSortAlgorithm)
            .Sort(list, offset, offset + length, LessThan.Create(comparer));

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T, TLessThan>(
        this IList<T> list, int offset, int length, Func<T, T, bool> lessThan)
        where TLessThan: ILessThan<T>
        => default(IntroSortAlgorithm)
            .Sort(list, offset, offset + length, LessThan.Create(lessThan));

    /// <summary>Sorts list using IntroSort.</summary>
	/// <param name="list">List to be sorted.</param>
    /// <param name="offset">Starting offset within list.</param>
    /// <param name="length">Length of sorted slice of list.</param>
    /// <param name="lessThan">LessThan comparer.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void IntroSort<T, TLessThan>(
        this IList<T> list, int offset, int length, TLessThan lessThan)
        where TLessThan: ILessThan<T>
        => default(IntroSortAlgorithm)
            .Sort(list, offset, offset + length, lessThan);

}
